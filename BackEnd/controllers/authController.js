import User from "../models/User.js";
import generateToken from "../utils/generateToken.js";
import asyncHandler from 'express-async-handler';
import bcrypt from 'bcryptjs';

// Registration process
// @desc    Register a new user
// @route   POST /api/auth/register
// @access  Public
export const userRegistration = asyncHandler(async (req, res) => {
    const { email, password, name } = req.body;

    // Check if all fields are provided
    if (!name || !email || !password) {
        res.status(400);
        throw new Error('Please add all fields');
    }

    // Check if the user already exists
    const userExists = await User.findOne({ email });
    if (userExists) {
        res.status(400);
        throw new Error('User already exists');
    }

    // Create new user
    const user = await User.create({
        name,
        email,
        password, // Password will be hashed automatically due to pre-save hook
    });

    if (user) {
        // Return user data with JWT token
        res.status(201).json({
            _id: user._id, //automatically generated by MongoDB.
            name: user.name,
            email: user.email,
            token: generateToken(user._id),
        });
    } else {
        res.status(400);
        throw new Error('Invalid user data');
    }
});

// @desc    Authenticate user & get token
// @route   POST /api/auth/login
// @access  Public

export const userLogin = asyncHandler(async (req, res) => {
    const { email, password } = req.body;
  
    // Check if both email and password are provided
    if (!email || !password) {
      res.status(400);
      throw new Error('Please provide both email and password');
    }
  
    // Find user by email
    const user = await User.findOne({ email });
  
    if (user && (await bcrypt.compare(password, user.password))) {
      // If user exists and the password matches, return the token
      res.json({
        _id: user._id,
        name: user.name,
        email: user.email,
        token: generateToken(user._id),
      });
    } else {
      res.status(401);
      throw new Error('Invalid email or password');
    }
  });